This directory contains some samples

to build all samples 
make

binaries can be found on bin/YOUR SYSTEM/[Native|Bytecode]
for example : /bin/Linux64/Native
The kernels directory must be on the same directory as binaries


CustomPi:
this sample uses custom vectors to compute on integer couples
to test :
$ ./Custom.asm 
$ ./Custom.byte 


DeviceQuery:
This sample gives you info about your system presenting every device compatible with Spoc
It does not use any GPGPU kernel and tus does not run code on your GPU.
$ ./DeviceQuery.asm

Game :
This samples plays a game of life using OCaml Graphics 
options:
 -device number of the device [0]
 -width width of the image to compute [1024]
 -height height of the image to compute [1024]
 -gens max number of generations [1024]
for example : 
$ ./Game.asm -device 2 width 400 -height 400 -gens 256

Mandelbrot:
It computes and displays the mandelbrot set using a single GPU.
options:
 -device number of the device [0]
 -width width of the image to compute [1024]
 -height height of the image to compute [1024]
 -max_iter max number of iterations [1024]

Mandelbrot2
It computes and displays the mandelbrot set using 2 GPUs
options:
 -device1 number of the device [0]
 -device2 number of the device [0]
 -width width of the image to compute [1024]
 -height height of the image to compute [1024]
 -max_iter max number of iterations [1024]


VecAdd:
It adds two vectors using a single GPU
options:
 -device number of the device [0]
 -size size of the vectors to multiply [1024]
 -auto let Spoc handles transfers automatically [false]
 -verify verify computation [true]

VecAdd_MultiGPU
It adds two vectors using 2 GPUs.
options :
 -device1 number of the device [0]
 -device2 number of the device [1]
 -size size of the vectors to multiply [1024]
 -auto let Spoc handles transfers automatically [false]
 -verify verify computation [true]

